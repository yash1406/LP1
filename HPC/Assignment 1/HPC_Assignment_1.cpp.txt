// !nvcc --version
// !pip install git+git://github.com/andreinechaev/nvcc4jupyter.git
// %load_ext nvcc_plugin
  %%cu
  #include<iostream>
  #include<math.h>

  #define n 256

  using namespace std;

  __global__ void minimum(int *input) {
      int tid = threadIdx.x;
      int step_size = 1;
      int number_of_threads = blockDim.x;
      
     // printf("No of threads = %d", number_of_threads);
      
      while(number_of_threads>0) {
          if(tid < number_of_threads) {
              int first = tid*step_size*2;
              int second = first + step_size;
              if(input[second] < input[first])
                input[first] = input[second];

              //printf("First = %d Second = %d\n", input[first], input[second]);
          }
          step_size <<= 1;
          number_of_threads >>= 1;
      }
  }

  __global__ void maximum(int *input) {
      int tid = threadIdx.x;
      int step_size = 1;
      int number_of_threads = blockDim.x;
      
      while(number_of_threads>0) {
          if(tid < number_of_threads) {
              int first = tid*step_size*2;
              int second = first + step_size;
              if(input[second] > input[first])
                input[first] = input[second];
          }
          step_size <<= 1;
          number_of_threads >>= 1;
      }
  }

  __global__ void sum(int *input) {
      const int tid = threadIdx.x;
      int step_size = 1;
      int number_of_threads = blockDim.x;
      
      while(number_of_threads > 0) {
          if(tid < number_of_threads) {
              int first = tid * step_size * 2;
              int second = first + step_size;
              
              input[first] += input[second];
          }
          step_size <<= 1;
          number_of_threads >>= 1;
        
      }
  }

  __global__ void mean_diff_sq(float *input, float mean) {
      input[threadIdx.x] -= mean;
      input[threadIdx.x] *= input[threadIdx.x];
  }

  __global__ void sum_floats(float *input) {
      int tid = threadIdx.x;
      int step_size = 1;
      int number_of_threads = blockDim.x;
      
      while(number_of_threads > 0) {
          if(tid < number_of_threads) {
              int first = tid * step_size * 2;
              int second = first + step_size;
              
              input[first] += input[second];
          }
          step_size <<= 1;
          number_of_threads >>= 1;
        
      }
  }

    void random_ints(int *input, int size) {
      for(int i=0; i<size; i++)  {
          input[i] = rand()%(size);
          cout<<input[i]<<"  ";   
      }
      cout<<endl;

  }

  void copy_int_to_float(float *dest, int *src, int size){
      for(int i=0; i<size; i++)
          dest[i] = float(src[i]);
  }

  

  int main() {
      
      int size = n*sizeof(int); //calculate no. of bytes for array
      int *arr;
      int *arr_d, result;
    
      arr = (int *)malloc(size);
      random_ints(arr, n);
    

      /* cudaMalloc() allocates memory from Global memory on GPU */
      cudaMalloc((void **)&arr_d, size);
      
      
      //Min Value
      
      /* cudaMemcpy() copies the contents from destination to source. Here destination is arr_d and source is arr */
      cudaMemcpy(arr_d, arr, size, cudaMemcpyHostToDevice);
      
      /* call to kernel. Here 1 is number of blocks, n/2 is the number of threads per block and arr_d are the arguments */ 
      minimum<<<1,n/2>>>(arr_d);
      
      cudaMemcpy(&result, arr_d, sizeof(int), cudaMemcpyDeviceToHost);
      
      cout<<"The minimum element is "<<result<<endl;
        
        
      //Max Value
      cudaMemcpy(arr_d, arr, size, cudaMemcpyHostToDevice);
      
      maximum<<<1,n/2>>>(arr_d);
      
      cudaMemcpy(&result, arr_d, sizeof(int), cudaMemcpyDeviceToHost);
      
      cout<<"The maximum element is "<<result<<endl;
      
      //Sum 
      cudaMemcpy(arr_d, arr, size, cudaMemcpyHostToDevice);
      
      sum<<<1,n/2>>>(arr_d);
      
      cudaMemcpy(&result, arr_d, sizeof(int), cudaMemcpyDeviceToHost);
      
      cout<<"The sum is "<<result<<endl;
      

      //Average
      float mean = float(result)/n;
      cout<<"The mean is "<<mean<<endl;
      
      //Variace
      float *arr_float;
      float *arr_std, stdValue;
      
      arr_float = (float *)malloc(n*sizeof(float));
      cudaMalloc((void **)&arr_std, n*sizeof(float));
      
      copy_int_to_float(arr_float, arr, n);
      
      cudaMemcpy(arr_std, arr_float, n*sizeof(float), cudaMemcpyHostToDevice);
      
      mean_diff_sq <<<1,n>>>(arr_std, mean);
      sum_floats<<<1,n/2>>>(arr_std);
      
      cudaMemcpy(&stdValue, arr_std, sizeof(float), cudaMemcpyDeviceToHost);
      
      
      stdValue = stdValue / n;
      cout<<"The variance is "<<stdValue<<endl;

      //Standard Deviation
      stdValue = sqrt(stdValue);
      cout<<"The standard deviation is "<<stdValue<<endl;
      
      cudaFree(arr_d);
            
      return 0;
  }
// OUTPUT:
//   103  198  105  115  81  255  74  236  41  205  186  171  242  251  227  70  124  194  84  248  27  232  231  141  118  90  46  99  51  159  201  154  102  50  13  183  49  88  163  90  37  93  5  23  88  233  94  212  171  178  205  198  155  180  84  17  14  130  116  65  33  61  220  135  112  233  62  161  65  225  252  103  62  1  126  151  234  220  107  150  143  56  92  42  236  176  59  251  50  175  60  84  236  24  219  92  2  26  254  67  251  250  170  58  251  41  209  230  5  60  124  148  117  216  190  97  137  249  92  187  168  153  15  149  177  235  241  179  5  239  247  0  233  161  58  229  202  11  203  208  72  71  100  189  31  35  30  168  28  123  100  197  20  115  90  197  94  75  121  99  59  112  100  36  17  158  9  220  170  212  172  242  27  16  175  59  51  205  227  80  72  71  21  92  187  111  34  25  186  155  125  245  11  225  26  28  127  35  248  41  248  164  27  19  181  202  78  232  152  50  56  224  121  77  61  52  188  95  78  119  250  203  108  5  172  134  33  43  170  26  85  162  190  112  181  115  59  4  92  211  54  148  179  175  226  240  228  158  79  50  21  73  253  130  78  169  
// The minimum element is 0
// The maximum element is 255
// The sum is 32454
// The mean is 126.773
// The variance is 5804.25
// The standard deviation is 76.1857